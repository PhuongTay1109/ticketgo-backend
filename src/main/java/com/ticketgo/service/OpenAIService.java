package com.ticketgo.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.ticketgo.dto.RouteSearchDto;
import com.ticketgo.entity.Role;
import com.ticketgo.request.ChatRequest;
import com.ticketgo.request.MessageCreateRequestDto;
import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
@RequiredArgsConstructor
@Slf4j
public class OpenAIService {
    @Value("${openai.azure.api-key}")
    private String azureApiKey;

    @Value("${openai.azure.endpoint}")
    private String azureEndpoint;

    @Value("${openai.azure.deployment-name}")
    private String deploymentName;

    private final RouteService routeService;
    private final ChatBotService chatBotService;
    private final RestTemplate restTemplate = new RestTemplate();
    private final ObjectMapper mapper;

    @PostConstruct
    public void init() {
        mapper.registerModule(new JavaTimeModule());
        mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
    }


    public String chatWithToolCalls(ChatRequest request) throws Exception {
        var messageList = chatBotService.getMessages(request.getConversationId());
        List<Map<String, Object>> messages = new ArrayList<>();

        // Add system prompt
        messages.add(Map.of(
                "role", Role.system,
                "content", systemPrompt()
        ));

        // Add message history
        if (messageList != null) {
            for (var message : messageList) {
                messages.add(Map.of(
                        "role", message.getRole().toString(),
                        "content", message.getContent()
                ));
            }
        }

        // Add user message
        messages.add(Map.of(
                "role", Role.user.toString(),
                "content", request.getContent()
        ));

        List<Map<String, Object>> functions = getDefinedFunctions();

        boolean hasToolCalls = true;
        String responseBody = null;
        JsonNode responseJson = null;

        while (hasToolCalls) {
            responseBody = callOpenAI(messages, functions);
            responseJson = mapper.readTree(responseBody);

            JsonNode toolCall = responseJson.at("/choices/0/message/function_call");

            if (toolCall != null && !toolCall.isMissingNode() && toolCall.isObject()) {
                String functionName = toolCall.get("name").asText();
                JsonNode argumentsNode = toolCall.get("arguments");

                String toolResponse = processToolCall(functionName, argumentsNode);

                // Add assistant message with function_call
                Map<String, Object> assistantMsg = new HashMap<>();
                assistantMsg.put("role", "assistant");
                assistantMsg.put("content", null);
                assistantMsg.put("function_call", Map.of(
                        "name", functionName,
                        "arguments", argumentsNode
                ));
                messages.add(assistantMsg);

                // Add tool message with function name and response
                Map<String, Object> toolMsg = new HashMap<>();
                toolMsg.put("role", "function");
                toolMsg.put("name", functionName);
                toolMsg.put("content", toolResponse);
                messages.add(toolMsg);
            } else {
                hasToolCalls = false;
            }
        }

        JsonNode finalMessageNode = responseJson.at("/choices/0/message/content");
        if (!finalMessageNode.isMissingNode()) {
            addMessage(request.getConversationId(), Role.user, request.getContent());
            addMessage(request.getConversationId(), Role.assistant, finalMessageNode.asText());
            return finalMessageNode.asText();
        } else {
            return "[Kh√¥ng c√≥ n·ªôi dung tr·∫£ v·ªÅ t·ª´ assistant]";
        }
    }

    private String callOpenAI(List<Map<String, Object>> messages, List<Map<String, Object>> functions) {
        Map<String, Object> requestBody = new HashMap<>();
        requestBody.put("messages", messages);
        requestBody.put("functions", functions);

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.set("api-key", azureApiKey);

        HttpEntity<Map<String, Object>> request = new HttpEntity<>(requestBody, headers);

        String url = String.format(
                "%s/openai/deployments/%s/chat/completions?api-version=2024-02-15-preview",
                azureEndpoint, deploymentName
        );

        ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.POST, request, String.class);
        return response.getBody();
    }

    private String processToolCall(String functionName, JsonNode argumentsNode) throws Exception {
        if (argumentsNode.isTextual()) {
            argumentsNode = mapper.readTree(argumentsNode.asText());
        }

        switch (functionName) {
            case "SearchBusRoutes":
                RouteSearchDto args = mapper.treeToValue(argumentsNode, RouteSearchDto.class);
                String sortBy = args.getSortBy() != null ? args.getSortBy() : "departureTime";
                String sortDirection = args.getSortDirection() != null ? args.getSortDirection() : "asc";
                int pageNumber = args.getPageNumber() != null ? args.getPageNumber() : 1;
                int pageSize = args.getPageSize() != null ? args.getPageSize() : 10;

                log.info("[Chatbot] Calling searchRoutes with: departureLocation={}, arrivalLocation={}, departureDate={}, sortBy={}, sortDirection={}, pageNumber={}, pageSize={}",
                        args.getDepartureLocation(),
                        args.getArrivalLocation(),
                        args.getDepartureDate(),
                        sortBy,
                        sortDirection,
                        pageNumber,
                        pageSize
                );
                var result = routeService.searchRoutes(
                        args.getDepartureLocation(),
                        args.getArrivalLocation(),
                        args.getDepartureDate() != null ? java.time.LocalDate.parse(args.getDepartureDate()) : null,
                        sortBy,
                        sortDirection,
                        pageNumber,
                        pageSize
                );
                // Convert the response to JSON string
                String jsonResponse = mapper.writeValueAsString(result.getBody());
                log.info("[Chatbot] Response from searchRoutes: {}", jsonResponse);

                return jsonResponse;
            default:
                throw new IllegalArgumentException("Function not supported: " + functionName);
        }
    }

    private void addMessage(String conversationId, Role role, String content) {
        chatBotService.createMessage(new MessageCreateRequestDto(conversationId, role, content));
    }

    private String systemPrompt() {
        var systemTime = LocalDateTime.now();
        return "B·∫°n l√† m·ªôt tr·ª£ l√Ω th√¥ng minh chuy√™n h·ªó tr·ª£ t√¨m ki·∫øm chuy·∫øn xe bu√Ωt. B·∫°n c√≥ th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng b·∫±ng c√°ch s·ª≠ d·ª•ng c√°c c√¥ng c·ª• t√¨m ki·∫øm chuy·∫øn xe. H√£y l·ªãch s·ª±, s√∫c t√≠ch v√† ch√≠nh x√°c.\n" +
                "\n" +
                "<general_guidelines>\n" +
                "- Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát\n" +
                "- Tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi ƒë·ªãnh d·∫°ng HTML c√≥ styling c∆° b·∫£n (in ƒë·∫≠m, danh s√°ch, ti√™u ƒë·ªÅ) ph√π h·ª£p hi·ªÉn th·ªã web\n" +
                "- S·ª≠ d·ª•ng th·∫ª <ul><li> cho danh s√°ch, <strong> cho text quan tr·ªçng, <h3> cho ti√™u ƒë·ªÅ\n" +
                "- Ph√¢n t√≠ch √Ω ƒë·ªãnh c·ªßa ng∆∞·ªùi d√πng v√† quy·∫øt ƒë·ªãnh c√≥ c·∫ßn g·ªçi API t√¨m ki·∫øm hay kh√¥ng\n" +
                "- N·∫øu API c√≥ s·∫µn, map c√°c gi√° tr·ªã ng∆∞·ªùi d√πng cung c·∫•p v√†o parameters API\n" +
                "- N·∫øu API th·∫•t b·∫°i, th√¥ng b√°o ng∆∞·ªùi d√πng th·ª≠ l·∫°i sau\n" +
                "- Tr·∫£ l·ªùi m·ªôt c√°ch r√µ r√†ng v√† h·ªØu √≠ch\n" +
                "</general_guidelines>\n" +
                "\n" +
                "<route_search_guidelines>\n" +
                "- Khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ chuy·∫øn xe m√† kh√¥ng ch·ªâ ƒë·ªãnh b·ªô l·ªçc, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh cho c√°c tham s·ªë kh√¥ng ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh\n" +
                "- Khi hi·ªÉn th·ªã th√¥ng tin chuy·∫øn xe, lu√¥n bao g·ªìm c√°c tr∆∞·ªùng: Tuy·∫øn ƒë∆∞·ªùng, Th·ªùi gian kh·ªüi h√†nh, Th·ªùi gian ƒë·∫øn, Gi√° v√©, S·ªë gh·∫ø tr·ªëng, Lo·∫°i xe\n" +
                "- ƒê·ªãnh d·∫°ng th·ªùi gian theo dd/MM/yyyy HH:mm\n" +
                "- ƒê·ªãnh d·∫°ng gi√° ti·ªÅn theo VND v·ªõi d·∫•u ph·∫©y ph√¢n c√°ch\n" +
                "- Hi·ªÉn th·ªã k·∫øt qu·∫£ theo ƒë·ªãnh d·∫°ng:\n" +
                "  üöå **[Tuy·∫øn ƒë∆∞·ªùng]**\n" +
                "  - **Kh·ªüi h√†nh**: [Th·ªùi gian kh·ªüi h√†nh]\n" +
                "  - **ƒê·∫øn n∆°i**: [Th·ªùi gian ƒë·∫øn]\n" +
                "  - **Gi√° v√©**: [Gi√°] VND\n" +
                "  - **Gh·∫ø tr·ªëng**: [S·ªë gh·∫ø]\n" +
                "  - **Lo·∫°i xe**: [Lo·∫°i xe]\n" +
                "</route_search_guidelines>\n" +
                "<url_guidelines>\n" +
                "  - Khi tr·∫£ v·ªÅ k·∫øt qu·∫£ t√¨m ki·∫øm, lu√¥n bao g·ªìm URL ƒë·∫øn trang FE v·ªõi selectedScheduleId l√† scheduleId c·ªßa m·ªói k·∫øt qu·∫£ trong danh s√°ch\n" +
                "  - ƒê·ªãnh d·∫°ng URL: https://ticketgo-black.vercel.app/search?departureLocation=...&arrivalLocation=...&departureDate=...&sortBy=departureTime&sortDirection=asc&pageNumber=1&pageSize=10&selectedScheduleId=...\n" +
                "</url_guidelines>\n" +
                "\nTh·ªùi gian hi·ªán t·∫°i: " + systemTime + "\n";
    }

    private List<Map<String, Object>> getDefinedFunctions() {
        List<Map<String, Object>> functions = new ArrayList<>();

        Map<String, Object> searchBusRoutesTool = Map.of(
                "name", "SearchBusRoutes",
                "description", "T√¨m ki·∫øm chuy·∫øn xe bu√Ωt d·ª±a tr√™n ƒëi·ªÉm ƒëi, ƒëi·ªÉm ƒë·∫øn, ng√†y kh·ªüi h√†nh v√† c√°c ti√™u ch√≠ kh√°c",
                "parameters", Map.of(
                        "type", "object",
                        "properties", getSearchBusRoutesProperties(),
                        "required", List.of()
                )
        );

        functions.add(searchBusRoutesTool);
        return functions;
    }

    private Map<String, Object> getSearchBusRoutesProperties() {
        Map<String, Object> properties = new HashMap<>();

        properties.put("departureLocation", Map.of(
                "type", "string",
                "description", "ƒêi·ªÉm kh·ªüi h√†nh. B·∫Øt bu·ªôc."
        ));
        properties.put("arrivalLocation", Map.of(
                "type", "string",
                "description", "ƒêi·ªÉm ƒë·∫øn. B·∫Øt bu·ªôc."
        ));
        properties.put("departureDate", Map.of(
                "type", "string",
                "format", "date",
                "description", "Ng√†y kh·ªüi h√†nh theo ƒë·ªãnh d·∫°ng yyyy-MM-dd. B·∫Øt bu·ªôc."
        ));
        properties.put("sortBy", Map.of(
                "type", "string",
                "description", "S·∫Øp x·∫øp theo tr∆∞·ªùng n√†o (departureTime, price, duration). T√πy ch·ªçn."
        ));
        properties.put("sortDirection", Map.of(
                "type", "string",
                "description", "H∆∞·ªõng s·∫Øp x·∫øp (asc ho·∫∑c desc). T√πy ch·ªçn."
        ));
        properties.put("pageNumber", Map.of(
                "type", "integer",
                "description", "S·ªë trang (b·∫Øt ƒë·∫ßu t·ª´ 1). M·∫∑c ƒë·ªãnh l√† 1.",
                "default", 1
        ));
        properties.put("pageSize", Map.of(
                "type", "integer",
                "description", "S·ªë k·∫øt qu·∫£ m·ªói trang. M·∫∑c ƒë·ªãnh l√† 10.",
                "default", 10
        ));
        return properties;
    }
}
